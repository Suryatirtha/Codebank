#A Humble barchart (Unordered)
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
df = pd.read_csv("District_PGI_Table_1.csv")
fig= plt.figure(figsize=(7, 5))
plt.title("How have India's districts performed")
df["Grade"]
df["Grade"].unique()
categories =['Uttam', 'Prachesta-1', 'Prachesta-2', 'Prachesta-3', 'Akanshi-1', 'Ati-Uttam'] #from df["Grade"].unique()
counts= df["Grade"].value_counts()[categories].tolist()
plt.bar(categories, counts)
plt.xlabel('Grade')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('my_figure.png', bbox_inches='tight', dpi=300)

#BAR CHART ORDERED
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
df = pd.read_csv("District_PGI_Table_1.csv")
fig= plt.figure(figsize=(7, 5))
plt.title("How have India's districts performed")
df["Grade"]
df["Grade"].value_counts()
df_ranked=pd.DataFrame(df["Grade"].value_counts()).reset_index()#Turn into a dataframe
df_ranked
plt.bar(df_ranked["Grade"], df_ranked["count"])
plt.xlabel('Grade')
plt.ylabel('Count')
plt.tight_layout()
plt.savefig('my_figure1.png', bbox_inches='tight', dpi=300)

#THE DOT PLOT
df = pd.read_csv("District_PGI_Table_1.csv")
fig= plt.figure(figsize=(7, 5))
plt.title("How have India's districts performed")
df["Grade"]
df["Grade"].unique()
categories =['Uttam', 'Prachesta-1', 'Prachesta-2', 'Prachesta-3', 'Akanshi-1', 'Ati-Uttam'] #from df["Grade"].unique()
counts= df["Grade"].value_counts()[categories].tolist()
plt.scatter(categories, counts)

#LOLLIPOP CHART
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv("District_PGI_Table_1.csv")
fig= plt.figure(figsize=(9, 6))
plt.title("How have India's districts performed")
df["Grade"]
df["Grade"].unique()
categories =['Uttam', 'Prachesta-1', 'Prachesta-2', 'Prachesta-3', 'Akanshi-1', 'Ati-Uttam'] #from df["Grade"].unique()
counts= df["Grade"].value_counts()[categories].tolist()
plt.yticks([])
plt.xticks([])
plt.subplot(2,1,1)
plt.scatter(categories, counts)
plt.vlines(categories, 0, counts)
plt.ylabel('Grade')
plt.xlabel('Count')
plt.subplot(2,1,2)
plt.scatter(counts, categories)
plt.hlines(categories, 0, counts)
plt.ylabel('Count')
plt.xlabel('Grade')
plt.tight_layout()
plt.savefig('my_figure.png', bbox_inches='tight', dpi=300)
plt.xlabel('Grade')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('my_figure.png', bbox_inches='tight', dpi=300)

# A PIE CHART 
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
fig= plt.figure(figsize=(7, 5))
df = pd.read_csv("District_PGI_Table_1.csv")
df
df["Grade"]
df_counts = df["Grade"].value_counts()
df_counts
plt.title("How the districts rank")
plt.pie(df_counts, labels=df_counts.index, autopct='%1.2f%%')
plt.tight_layout()
plt.savefig('my_figure1.png', bbox_inches='tight', dpi=300)

# A DONUT CHART
import pandas as pd
import matplotlib.pyplot as plt
fig= plt.figure(figsize=(7, 5))
plt.title("How the districts rank")
df = pd.read_csv("District_PGI_Table_1.csv")
df["Grade"]
df_counts = df["Grade"].value_counts()
df_counts
plt.pie(df_counts, labels=df_counts.index, autopct='%d%%', pctdistance=0.85)
centre_circle = plt.Circle((0, 0), 0.70, fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
plt.axis('equal')
plt.tight_layout()
plt.savefig('my_figure1.png', bbox_inches='tight', dpi=300)
pctdistance=0.85`: Moves the percentage labels closer to the center.
centre_circle = plt.Circle()`: Creates a white circle at the center.
`fig.gca().add_artist(centre_circle)`: Adds the circle to the plot.
`plt.axis('equal')`: Ensures the circle appears as a circle, not an ellipse.


#STACKED VERTICAL BAR CHART
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
df = pd.read_csv("District_PGI_Table_1.csv")
df_grade_counts = pd.DataFrame(df["Grade"].value_counts()).reset_index()
df_grade_counts


#Series 1 = (Prachesta-1, 290)
#Series 2 = (Uttam,	271)
#Series 3 = (Prachesta-2, 117)
#Series 4 = (Ati-Uttam, 51)
#Series 5 = (Prachesta-3	18ax = plt.axes()

#Data
labels = ['Performance']
sizes1 = [290]
sizes2 = [271]
sizes3= [117]
sizes4= [51]
sizes5 = [18]
ax=plt.axes()

x = np.arange(1)
height1 = sizes1
height2 = sizes2
height3 = sizes3
height4 = sizes4
height5 = sizes5

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
plt.title("Vertical Stacked Bar Chart")
ax.bar(x, height1, width=0.1, label = "Prachesta-1")
ax.bar(x, height2, bottom=height1, width=0.1, label = "Uttam")
ax.bar(x, height3, bottom=[x + y for x, y in zip(height1, height2)], width=0.1, label = "Prachesta-2")
ax.bar(x, height4, bottom=[x + y + z for x, y, z in zip(height1, height2, height3)],width=0.1, label = "Ati-Uttam")
ax.bar(x, height5, bottom=[x + y + z + w for x, y, z, w in zip(height1, height2, height3, height4)], width=0.1, label ="Prachesta-3")
ax.text(x, height1[0]/2, str(height1[0]), ha='center')
ax.text(x, height1[0] + height2[0]/2, str(height2[0]), ha='center')
ax.text(x, height1[0] + height2[0] + height3[0]/2, str(height3[0]), ha='center')
ax.text(x, height1[0] + height2[0] + height3[0] + height4[0]/2, str(height4[0]), ha='center')
ax.text(x, height1[0] + height2[0] + height3[0] + height4[0] + height5[0]/2, str(height5[0]), ha='center')
plt.xlim(-0.5, 0.5)
plt.legend()
plt.xlabel("Indicators")
plt.tight_layout()
plt.savefig('my_figure2.png', bbox_inches='tight', dpi=300)

# A HORIZONTAL STACKED BAR CHART
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
df = pd.read_csv("District_PGI_Table_1.csv")
df_grade_counts = pd.DataFrame(df["Grade"].value_counts()).reset_index()
df_grade_counts

#Series 1 = (Prachesta-1, 290)
#Series 2 = (Uttam,	271)
#Series 3 = (Prachesta-2, 117)
#Series 4 = (Ati-Uttam, 51)
#Series 5 = (Prachesta-3	18
ax = plt.axes()
#Data
labels = ['Performance']
sizes1 = [290]
sizes2 = [271]
sizes3= [117]
sizes4= [51]
sizes5 = [18]

plt.title("A Horizontal Stacked Bar Chart")
x = np.arange(1)
height1 = sizes1
height2 = sizes2
height3 = sizes3
height4 = sizes4
height5 = sizes5
bar_height = 0.10 #Height of the bar
ax.barh(0, height1, height = bar_height, label = "Prachesta-1")
ax.barh(0, height2, left=height1, height = bar_height, label = "Uttam")
ax.barh(0, height3, left=[x + y for x, y in zip(height1, height2)], height = bar_height,label = "Prachesta-2")
ax.barh(0, height4, left=[x + y + z for x, y, z in zip(height1, height2, height3)], height = bar_height, label = "Ati-Uttam")
ax.barh(0, height5, left=[x + y + z + w for x, y, z, w in zip(height1, height2, height3, height4)], height = bar_height, label ="Prachesta-3")
plt.ylim(0,0.4)
ax.legend()
ax.text(height1[0]/2, 0.02, str(height1[0]), ha='center')
ax.text(height1[0] + height2[0]/2, 0.02, str(height2[0]), ha='center')
ax.text(height1[0] + height2[0] + height3[0]/2, 0.02, str(height3[0]), ha='center')
ax.text(height1[0] + height2[0] + height3[0] + height4[0]/2, 0.02, str(height4[0]), ha='center')
ax.text(height1[0] + height2[0] + height3[0] + height4[0] + height5[0]/2, 0.02, str(height5[0]), ha='center')
plt.xlabel("Indicators")
plt.tight_layout()
plt.savefig('my_figure1.png', bbox_inches='tight', dpi=300)

# Unordered bar chart with colour

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import brewer2mpl
# Get a qualitative color map
bmap = brewer2mpl.get_map('Set1', 'Qualitative', 8)
df = pd.read_csv("District_PGI_Table_1.csv")
fig= plt.figure(figsize=(7, 5))
plt.title("How have India's districts performed")
df["Grade"]
df["Grade"].unique()
categories =['Uttam', 'Prachesta-1', 'Prachesta-2', 'Prachesta-3', 'Akanshi-1', 'Ati-Uttam'] #from df["Grade"].unique()
counts= df["Grade"].value_counts()[categories].tolist()
colors = bmap.mpl_colors
plt.bar(categories, counts, color=[colors[i % len(colors)] for i in range(len(categories))])
plt.xlabel('Grade')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('my_figure.png', bbox_inches='tight', dpi=300)

# Ordered Bar Chart With Color Saturation
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import brewer2mpl
df = pd.read_csv("District_PGI_Table_1.csv")
bmap = brewer2mpl.get_map('Blues', 'Sequential', 9)
fig = plt.figure(figsize=(7, 5))
plt.title("How have India's districts performed")
colors = bmap.mpl_colors[::-1]
df_ranked = pd.DataFrame(df["Grade"].value_counts()).reset_index()
plt.bar(df_ranked["Grade"], df_ranked["count"], color=[colors[i % len(colors)] for i in range(len(df_ranked["Grade"]))])
plt.xlabel('Grade')
plt.ylabel('Count')
plt.tight_layout()
plt.savefig("my_figure1.png", bbox_inches="tight", dpi=300)

#Bar chart with a divergent colour theme
import pandas as pd
import matplotlib.pyplot as plt
df=pd.DataFrame({"Attribute": ["Sleep", "Anger", "Food", "Desire", "Philosophy", "Game Theory"], "Score": [20,40,60,80,120,130]})
fig = plt.figure(figsize=(7, 5))
x=df["Attribute"]
y=df["Score"]
import brewer2mpl
bmap = brewer2mpl.get_map('PRGn', 'Diverging', 6)
colors = bmap.mpl_colors
plt.bar(x,y)
plt.bar(x, y, color=[colors[i % len(colors)] for i in range(len(x))])
plt.tight_layout()
plt.savefig('my_figure1.png', bbox_inches='tight', dpi=300)
plt.show()

#WAFFLE CHART
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pywaffle import Waffle
df= pd.read_csv("arms.csv", skiprows=8, on_bad_lines="skip")
df.columns
df1 = df[["Recipient", '2020-2022']]
df1
df2 = df1.head(10)
df3 = df2["2020-2022"]/df2["2020-2022"].sum()*100
df2["Recipient"]
fig = plt.figure(
    FigureClass=Waffle,
    rows=5,
    values=df3,
    labels=list(df2['Recipient']),
    legend={'loc': 'upper left', 'bbox_to_anchor': (1.05, 1)}, figsize=(7, 5))
plt.title("Arms Imports")
plt.savefig('my_figure.png', bbox_inches='tight', dpi=300)

#WAFFLE CHART 2
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pywaffle import Waffle
df= pd.DataFrame({"Goals": ["Target", "Runs Scored"], "Numbers": [380, 190]}, index = [1,2])
df = df.sort_values('Numbers')
df

fig = plt.figure(
    FigureClass=Waffle,
    rows=5,
    columns=5,
    values=df["Numbers"],
    labels=list(df["Goals"]),
    legend={'loc': 'upper left', 'bbox_to_anchor': (1.05, 1)})
df["Numbers"]
plt.savefig('my_figure1.png', bbox_inches='tight', dpi=300)
plt.show()

WAFFLE CHART SHOWING PROGRESS
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pywaffle import Waffle

# Data
target = 100
progress = 75
target-progress

# Create a waffle chart
fig = plt.figure(
    FigureClass=Waffle,
    rows=10,
    columns=10,
    values=[1] * target,
    labels=["Progress"] * progress + ["Remaining"] * (target - progress),
    colors=["blue"] * progress + ["gray"] * (target - progress),
    legend={'loc': 'upper left', 'bbox_to_anchor': (1.05, 1), 
            'labels': ['Progress', 'Remaining'], 
            'handles': [plt.Line2D([0], [0], marker='o', color='w', label='Progress', markerfacecolor='blue', markersize=10), 
                          plt.Line2D([0], [0], marker='o', color='w', label='Remaining', markerfacecolor='gray', markersize=10)]}
)

plt.title("Progress towards target")
plt.figtext(0.8, 0.7, f"Completion: {progress}%", ha='center', fontsize=10)
plt.show()
plt.savefig('target1.png', bbox_inches='tight', dpi=300)

# A TREE MAP
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import squarify

df= pd.read_csv("arms.csv", skiprows=8, on_bad_lines="skip")
df.columns
df1 = df[["Recipient", '2020-2022']].head(10)
df1

plt.title("Top Arms Importers")
squarify.plot(sizes=df1['2020-2022'], label=df1['Recipient'], alpha=.8 )
plt.axis('off')

#TREE MAP WITH NUMBERS
import squarify
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
df= pd.read_csv("arms.csv", skiprows=8, on_bad_lines="skip")
df.columns
df1 = df[["Recipient", '2020-2022']].head(10)
df1
label= df1['Recipient']
sizes= df1['2020-2022']
plt.title("Top Arms Importers")
squarify.plot(sizes=sizes, label=[f"{label} ({size})" for label, size in zip(label, sizes)], alpha=.8)
plt.axis('off')
plt.show()

# THE CIRCULAR CHART

import pandas as pf
import matplotlib.pyplot
import circlify

df= pd.read_csv("arms.csv", skiprows=8, on_bad_lines="skip")
df.columns
df1 = df[["Recipient", '2020-2022']].head(10)
df1

fig=plt.figure()
circles = circlify.circlify(
    df1['2020-2022'].tolist(),
    show_enclosure=False,
    target_enclosure=circlify.Circle(x=0, y=0, r=1)
)
circles = circles[::-1]

print(circles)

print(circles)
# Create just a figure and only one subplot
fig, ax = plt.subplots(figsize=(10, 10))


# Find axis boundaries
lim = max(
    max(
        abs(circle.x) + circle.r,
        abs(circle.y) + circle.r,
    )
    for circle in circles
)
plt.xlim(-lim, lim)
plt.ylim(-lim, lim)

# List of colors
colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff', '#800000', '#008000', '#000080', '#808000']

# Plot the circles with colors
for circle, label, color in zip(circles, df1['Recipient'], colors):
    x, y, r = circle
    ax.add_patch(plt.Circle((x, y), r, alpha=0.5, linewidth=2, color=color, fill=True))
    plt.annotate(label, (x, y), va='center', ha='center', color='white')
    plt.title("Top Arms Importers")

plt.axis('off')
plt.title('Top Arms Importers')
fig.savefig("Circlify.png")

#BAR CHART WITh COLOURS
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

fig=plt.figure()

df = pd.read_csv("arms.csv", skiprows=8, on_bad_lines="skip")
df.columns
df1 = df[["Recipient", '2020-2022']].head(10)
df1 = df1.sort_values('2020-2022', ascending=False)

plt.title("Top Arms Importing Countries 2020-2022")
x = df1['Recipient']
y = df1['2020-2022']
colors = ['gray'] * len(x)  # colors grey
colors[0] = 'blue'  # 1st color blue

plt.barh(x, y, color=colors)
plt.grid(axis='x', linestyle='--', alpha=0.5)

# Invert the y-axis
plt.gca().invert_yaxis()

fig.savefig("Bar.png")

plt.show()

A HEAT MAP
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from matplotlib.colors import LinearSegmentedColormap

df = pd.read_csv("arms.csv", skiprows=8, on_bad_lines="skip")

df1 = df[["Recipient", '2020-2022']].head(10)
df1.columns
df1 = df1.sort_values('2020-2022')

values = np.array([2508, 2853, 3187, 3242, 3417, 3613, 3692, 6425, 7334, 9178])
values = values.reshape(1, -1)

# Create a custom colormap with darker early colors
cmap = LinearSegmentedColormap.from_list("Custom Reds", ["#FFC080", "#8B0A1A"])

# CREATE A HEATMAP

fig = plt.figure(figsize=(12, 2))
sns.heatmap(values, cmap=cmap, fmt=".0f", cbar=False,
             xticklabels=df1['Recipient'], yticklabels=False)

# Reversed the xticks
plt.xticks(range(len(df1)), df1['Recipient'], rotation=90)
plt.title('Top Arms Importers 2020-22', fontsize=18)
fig.savefig('fig1.png')
plt.show()
