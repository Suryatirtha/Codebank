DF import
df=pd.read_csv("filename.csv")
# Delete rows: df= pd.read_csv("filename,csv", skiprows=2, on_bad_lines="skip")
#Delete semi-colon variables: df=pd.read_csv(""filename.csv", sep =';')
--------------
CHECK Data Types
df.dtypes 
df.info();
df.isnull().sum()
df.unique()
df.columns 
-----------------
SELECTING Rows & Columns
df=df.iloc[1:98] #Row selection
df= df.iloc[:, :7]#column selection
# Adding rows
new_rows = df.loc[[28, 30, 31, 38]]
new_rows
df1 = pd.concat([df1, new_rows], ignore_index=True)
df1[['Year', 'Value']].reset_index()
Filtering by row: df1 = df[df["Indicator Name"] == 'Electricity production from coal sources (% of total)']
-------------------------
RENAME Columns
df.columns
old_columns = ['Heatwaves Southeast (15° E–30° E/39° N–46° N, 1950–2024)',
       'Unnamed: 1', 'Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4', 'Unnamed: 5',
       'Unnamed: 6']
new_columns = df.iloc[0].tolist()
column_mapping = dict(zip(old_columns, new_columns))
df.rename(columns=column_mapping, inplace=True)
#Two decimal points: df2['Value'] = df2['Value'].apply(lambda x: round(x, 2))
------------------------------------------------
CHANGING DTYPES
df1['Mean area'] = pd.to_numeric(df1['Mean area'], errors='coerce')
df1['Value'] = df1['Value'].apply(lambda x: round(x, 2)) #Decimal Point changes
df1 = df1.dropna(subset=['Mean area', 'Duration', 'Mean anomaly_mid', 'Ranking'])
C: Convert into DateTime format: df["Present time format"] = pd.to_datetime(df["Present time format"], format = %Y%m%d)
Convert text to numbers: df["Columns"=1]
Convert Factor with levels into a dataframe pd.DataFrame(df["Factor"].value_counts()).reset_index(0)
C: Check data df.dtypes; df.info(); nan_counts = df.isnull().sum(); df.columns; df.unique()
D: Describe Data df.describe(); sns.boxplot(y="column_name", data=df)
Duplicate columns: df.drop_duplicates(subset='column_name', keep='first')
G: plt.grid(True, linestyle='--', alpha=0.5); plt.grid(axis='y', linestyle='--', alpha=0.5)  # Display only horizontal grid lines
P: Filtering by Columns: df = df[["Column1", "Column2"]
S: Sort values df.sort_values("column")
Strings: How to find strings df[df["Dataset"].str.contains("string")]; df = df[df["Dataset"].str.contains(r'\bstring\b')] 
T: Turn series into dataframe pd.DataFrame(Series).reset_index()
